{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\111\\\\Desktop\\\\E-edu\\\\edu-sys\\\\components\\\\student\\\\studentlist.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport API from '../../lib/api';\nimport timeago from '../../lib/timeago';\nimport { Table, Space, Popconfirm, message, Pagination } from 'antd';\nimport Link from 'next/link';\nimport SearchBar from '../searchbar';\nimport Helper from \"../../lib/helper\";\nconst {\n  Column\n} = Table;\n\nfunction StudentList() {\n  _s();\n\n  const {\n    0: studentData,\n    1: setStudentData\n  } = useState([]);\n  const {\n    0: search,\n    1: setSearch\n  } = useState();\n\n  const onSearch = value => {\n    setPagination(_objectSpread(_objectSpread({}, Pagination), {}, {\n      current: 1\n    }));\n    setSearch(value);\n  };\n\n  const getSelectedCurriculum = curriculuArrray => {\n    let array = curriculuArrray.map(item => {\n      return item[\"name\"];\n    });\n    return array.toString();\n  };\n\n  const {\n    0: updateCounter,\n    1: setupdateCounter\n  } = useState(0);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: pagination,\n    1: setPagination\n  } = useState({\n    current: 1,\n    pageSize: 10,\n    showSizeChanger: true\n  });\n\n  const fetchData = async () => {\n    setLoading(true);\n    let params = Helper.paginationToUrlObject(pagination);\n\n    if (search) {\n      params['kw'] = search;\n    }\n\n    API.getStudentList(params).then(res => {\n      let success = API.CheckAPIResult(res);\n\n      if (!success) {\n        setLoading(false);\n        return;\n      }\n\n      let data = res.data.datas.map(item => {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          key: item[\"id\"],\n          joinTime: timeago.format(new Date(item[\"ctime\"])),\n          getSelectedCurriculum: getSelectedCurriculum(item[\"courses\"]),\n          studentType: item[\"type_name\"]\n        });\n      });\n      setPagination(_objectSpread(_objectSpread({}, pagination), {}, {\n        total: res.data[\"pager\"][\"rowcount\"]\n      }));\n      setStudentData(data);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [updateCounter, search]);\n\n  const onDelete = async student => {\n    const res = await API.deleteStudent({\n      id: student[\"id\"]\n    });\n    let success = API.CheckAPIResult(res);\n\n    if (!success) {\n      message.error(`Error occured: ${res[msg]}`);\n      return;\n    }\n\n    message.success('Student Deleted');\n    setupdateCounter(updateCounter + 1);\n  };\n\n  const onTableChange = (pagination, filters, sorter, extra) => {\n    setPagination(pagination);\n    setupdateCounter(updateCounter + 1);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: \"30%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(SearchBar, {\n    placeHolder: \"search by name\",\n    onSearch: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), __jsx(Table, {\n    dataSource: studentData,\n    onChange: onTableChange,\n    loading: loading,\n    pagination: pagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(Column, {\n    title: \"ID\",\n    dataIndex: \"id\",\n    key: \"id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), __jsx(Column, {\n    title: \"Area\",\n    dataIndex: \"address\",\n    key: \"address\",\n    width: \"10%\",\n    filters: [{\n      text: \"新西兰\",\n      value: \"新西兰\"\n    }, {\n      text: \"日本\",\n      value: \"日本\"\n    }, {\n      text: \"中国\",\n      value: \"中国\"\n    }],\n    onFilter: (value, record) => record.address.includes(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }), __jsx(Column, {\n    title: \"Email\",\n    dataIndex: \"email\",\n    key: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }), __jsx(Column, {\n    title: \"Selected Curriculum\",\n    dataIndex: \"selectedCurriculum\",\n    key: \"selectedCurriculum\",\n    width: \"25%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }), __jsx(Column, {\n    title: \"Student type\",\n    dataIndex: \"studentTpye\",\n    key: \"studentType\",\n    width: \"15%\",\n    filters: [{\n      text: \"developer\",\n      value: \"developer\"\n    }, {\n      text: \"tester\",\n      value: \"tester\"\n    }],\n    onFilter: (value, record) => record.studentType.includes(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 18\n    }\n  }), __jsx(Column, {\n    title: \"Join Time\",\n    dataIndex: \"joinTime\",\n    key: \"joinTime\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 18\n    }\n  }), __jsx(Column, {\n    title: \"Action\",\n    dataIndex: \"action\",\n    render: (text, record) => __jsx(Space, {\n      size: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 22\n      }\n    }, __jsx(Link, {\n      href: `/students/editstudent?id=${record[\"id\"]}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 26\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 30\n      }\n    }, \"Edit\")), __jsx(Popconfirm, {\n      title: \"Do you confirm to delete this student?\",\n      onConfirm: () => {\n        onDelete(record);\n      },\n      okText: \"yes\",\n      cancelText: \"no\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 26\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 30\n      }\n    }, \"Delete\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 18\n    }\n  })));\n}\n\n_s(StudentList, \"od5MbYoHFXPZSqj4hPKiDYLCH78=\");\n\n_c = StudentList;\nexport default StudentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentList\");","map":{"version":3,"sources":["C:/Users/111/Desktop/E-edu/edu-sys/components/student/studentlist.js"],"names":["React","useEffect","useState","API","timeago","Table","Space","Popconfirm","message","Pagination","Link","SearchBar","Helper","Column","StudentList","studentData","setStudentData","search","setSearch","onSearch","value","setPagination","current","getSelectedCurriculum","curriculuArrray","array","map","item","toString","updateCounter","setupdateCounter","loading","setLoading","pagination","pageSize","showSizeChanger","fetchData","params","paginationToUrlObject","getStudentList","then","res","success","CheckAPIResult","data","datas","key","joinTime","format","Date","studentType","total","onDelete","student","deleteStudent","id","error","msg","onTableChange","filters","sorter","extra","width","text","record","address","includes"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\r\nimport API from '../../lib/api'\r\nimport timeago from '../../lib/timeago';\r\nimport { Table, Space, Popconfirm, message, Pagination } from 'antd';\r\nimport Link from 'next/link'\r\nimport SearchBar from '../searchbar';\r\nimport Helper from \"../../lib/helper\";\r\n\r\nconst { Column } =Table;\r\n\r\nfunction StudentList(){\r\n    const [studentData, setStudentData] = useState([]);\r\n\r\n    const [search, setSearch] = useState();\r\n    const onSearch = (value) => {\r\n        setPagination({...Pagination, current:1});\r\n        setSearch(value);\r\n    };\r\n\r\n\r\n    const getSelectedCurriculum = (curriculuArrray) => {\r\n        let array = curriculuArrray.map((item) => {\r\n            return item[\"name\"];\r\n        });\r\n        return array.toString();\r\n    };\r\n\r\n\r\n    const [updateCounter, setupdateCounter] = useState(0);\r\n    const [loading, setLoading] = useState(false);\r\n    const[pagination, setPagination] = useState({\r\n        current: 1, pageSize: 10, showSizeChanger: true\r\n    });\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        let params = Helper.paginationToUrlObject(pagination);\r\n        if(search) {\r\n            params['kw'] = search;\r\n        }\r\n        API.getStudentList(params).then((res) =>{\r\n            let success = API.CheckAPIResult(res);\r\n            if (!success) {\r\n                setLoading(false);\r\n                return;\r\n            }\r\n            let data = res.data.datas.map((item) => {\r\n                return {\r\n                    ...item,\r\n                    key: item[\"id\"],\r\n                    joinTime: timeago.format(new Date(item[\"ctime\"])),\r\n                    getSelectedCurriculum: getSelectedCurriculum(item[\"courses\"]),\r\n                    studentType: item[\"type_name\"],\r\n                };\r\n            });\r\n            setPagination({\r\n                ...pagination,\r\n                total: res.data[\"pager\"][\"rowcount\"],\r\n            });\r\n            setStudentData(data);\r\n            setLoading(false);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [updateCounter, search]);\r\n\r\n    const onDelete = async (student) => {\r\n        const res = await API.deleteStudent({id: student[\"id\"] });\r\n        let success = API.CheckAPIResult(res);\r\n        if (!success) {\r\n            message.error(`Error occured: ${res[msg]}`);\r\n            return;\r\n        }\r\n        message.success('Student Deleted');\r\n        setupdateCounter(updateCounter + 1);\r\n    };\r\n\r\n    const onTableChange = (pagination, filters, sorter, extra) => {\r\n        setPagination(pagination);\r\n        setupdateCounter(updateCounter + 1);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div style={{ width : \"30%\" }}>\r\n                <SearchBar\r\n                placeHolder=\"search by name\"\r\n                onSearch={onSearch}\r\n                />\r\n            </div>\r\n            < br/>\r\n            <Table dataSource={studentData} onChange={onTableChange} loading={loading} pagination={pagination}>\r\n                <Column \r\n                title=\"ID\" \r\n                dataIndex=\"id\"\r\n                key=\"id\" />\r\n                <Column \r\n                title=\"Area\"\r\n                dataIndex=\"address\"\r\n                key=\"address\"\r\n                width=\"10%\"\r\n                filters={[\r\n                    { text:\"新西兰\", value:\"新西兰\" },\r\n                    { text:\"日本\", value:\"日本\"},\r\n                    { text:\"中国\", value:\"中国\" },\r\n                ]}\r\n                onFilter={(value, record) => record.address.includes(value)} />\r\n                <Column title=\"Email\" dataIndex=\"email\" key=\"email\" />\r\n                <Column\r\n                title=\"Selected Curriculum\"\r\n                dataIndex=\"selectedCurriculum\"\r\n                key=\"selectedCurriculum\"\r\n                width=\"25%\"\r\n                 />\r\n                 <Column \r\n                 title=\"Student type\"\r\n                 dataIndex=\"studentTpye\"\r\n                 key=\"studentType\"\r\n                 width=\"15%\"\r\n                 filters={[\r\n                     { text:\"developer\", value: \"developer\"},\r\n                     { text:\"tester\", value:\"tester\"},\r\n                    ]}\r\n                    onFilter={(value, record) => record.studentType.includes(value)}\r\n                 />\r\n                 <Column title=\"Join Time\" dataIndex=\"joinTime\" key=\"joinTime\"/>\r\n                 <Column \r\n                 title=\"Action\"\r\n                 dataIndex=\"action\"\r\n                 render={(text, record) => (\r\n                     <Space size=\"middle\">\r\n                         <Link href={`/students/editstudent?id=${record[\"id\"]}`}>\r\n                             <a>Edit</a>\r\n                         </Link>\r\n                         <Popconfirm\r\n                         title=\"Do you confirm to delete this student?\"\r\n                         onConfirm={()=>{onDelete(record)}}\r\n                         okText=\"yes\"\r\n                         cancelText=\"no\"\r\n                         >\r\n                             <a>Delete</a>\r\n                         </Popconfirm>\r\n                     </Space>\r\n                 )} />\r\n            </Table>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default StudentList;"]},"metadata":{},"sourceType":"module"}